{
	// Place your alm workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"For Loop": 
	{
	  "prefix": ["hello"],
	  "body": ["for (const ${2:element} of ${1:array}) {", "\t$0", "}"],
	  "description": "A for loop."
	},
	"ADD": {
        "prefix": "ADDING STRING1 AT STRING2, ...",
        "body": [
            "ADDING ${1:STRING1} AT ${2:STRING2} ,"
        ],
		"description": "Copies new files, directories or remote file URLs from <src> and adds them to the filesystem of the image at the path <dest>.",
		
	},"ARG": {
        "prefix": "WITH THE ARGUMENT params",
        "body": [
            "WITH THE ARGUMENT ${1:params}"
        ],
		"description": "Defines a variable that users can pass at build-time to the builder with the docker build command using the --build-arg <varname>=<value> flag. ",
		
	},
	"ARG1": {
        "prefix": "WITH THE ARGUMENTS param1, params2",
        "body": [
            "WITH THE ARGUMENTS ${1:params1}, ${2:params2}"
        ],
		"description": "Defines a variable that users can pass at build-time to the builder with the docker build command using the --build-arg <varname>=<value> flag.",
		
	},
	"CMD": {
        "prefix": "CMD",
        "body": [
            "${1:CMD}"
        ],
		"description": "CALLING CMD",
		
	},
	"CONTAINERS": {
        "prefix": "CONTAINERS",
        "body": [
            "CONTAINERS ${1|STRING1,STRING2 STRING2|}"
        ],
		"description": "Declaration of a number of containers",
		
	},"COPY": {
        "prefix": "COPYING STRING1 TO STRING2, ...",
        "body": [
            "COPYING ${1:STRING1} TO ${2:STRING2} ,"
        ],
		"description": "Copies new files or directories from <src> and adds them to the filesystem of the container at the path <dest>.",
		
	},
	"ENTRYPOINT": {
        "prefix": "STARTING WITH params",
        "body": [
            "STARTING WITH ${1:params}"
        ],
		"description": "Entrypoint declaration, allows you to configure a container that will run as an executable.",
		
	},
	"ENV": {
        "prefix": "WITH THE ENVIRONMENTAL VARIABLE params",
        "body": [
            "${1|WITH THE ENVIRONMENTAL VARIABLE params,WITH THE ENVIRONMENTAL VARIABLES params params|}"
        ],
		"description": "Sets the environment variable <key> to the value <value>.",
		
	},
	"EXPOSE": {
        "prefix": "AT PORT params",
        "body": [
            "AT PORT ${1:params}"
        ],
		"description": "Informs Docker that the container listens on the specified network ports at runtime. You can specify whether the port listens on TCP or UDP, and the default is TCP if the protocol is not specified.",
		
	},
	"FROM": {
        "prefix": "OF images",
        "body": [
            "OF ${1:images}"
        ],
		"description": "Initializes a new build stage and sets the Base Image for subsequent instructions.",
		
	},
	"HEALTHCHECK": {
        "prefix": "CHECKING paramas",
        "body": [
            "WITH THE TAG ${1|NADA,params|}"
        ],
		"description": "Tells Docker how to test a container to check that it is still working.",
		
	},
	"IMAGES": {
        "prefix": "images",
        "body": [
            "${params}"
        ],
		"description": "Is used to execute code in a Docker container",
		
	},
	"INT": {
        "prefix": "int",
        "body": [
            "${1:n}"
        ],
		"description": "1 - 999999"
		
	},
	"LABEL1": {
        "prefix": "WITH THE TAGS STRING1 = STRING2...",
        "body": [
            "${1|WITH THE TAGS STRING1 = STRING2,WITH THE TAGS STRING1 = STRING2|}",
        ],
		"description": "Adds metadata to an image. A LABEL is a key-value pair.",
		
	},

	"LABEL": {
        "prefix": "WITH THE TAG STRING1 = STRING2",
        "body": [
            "1|WITH THE TAG STRING1 = STRING2",
        ],
		"description": "Adds metadata to an image. A LABEL is a key-value pair.",
		
	},
	"LABEL_VARIOUS": {
        "prefix": "WITH THE TAGS STRING1 = STRING2 ...",
        "body": [
            "WITH THE TAGS ${1:STRING1} = ${2:STRING2} ,"
        ],
		"description": "Adds metadata to an image. A LABEL is a key-value pair.",
		
	},
	"MORE": {
		"prefix": ", STRING3 = STRING4",
		"body": [
			", ${1:STRING} = ${2:STRING}"
		],
		"description": ""
	},
	"ONBUILD": {
        "prefix": "WHEN BUILDING STRING1 ",
        "body": [
            "WHEN BUILDING ${1:STRING1}"
        ],
		"description": "Adds to the image a trigger instruction to be executed at a later time, when the image is used as the base for another build. ",
		
	},
	"PARAMS": {
        "prefix": "params",
        "body": [
            "${STRING} ,"
        ],
		"description": "PARAMETERS",
		
	},
	"RUN": {
        "prefix": "THAT RUNS STRING ",
        "body": [
            "THAT RUNS ${1:STRING}"
        ],
		"description": "Will execute any commands in a new layer on top of the current image and commit the results. The resulting committed image will be used for the next step in the Dockerfile.",
		
	},
	"SHELL": {
        "prefix": "SHELL PARAMS",
        "body": [
            "SHELL ${1:PARAMS}"
        ],
		"description": "Allows the default shell used for the shell form of commands to be overridden.",
		
	},
	"START_VARIOUS": {
        "prefix": "NEED AN N CONTAINER (S) OF",
        "body": [
            "NEED AN $N ${1|CONTAINER,CONTAINERS|} OF "
        ],
        "description": "Initial grammar rule",
        
	},
	"STOPSIGNAL": {
        "prefix": "STOPPING A STRING/INT",
        "body": [
            "STOPPING A ${1|STRING,INT|}"
        ],
		"description": "Sets the system call signal that will be sent to the container to exit. ",
		
	},
	"STRING": {
        "prefix": "STRING",
        "body": [
            "${nombre:STRING}"
        ],
		"description": " ((a-z)*(A-Z)* (. , _ -  “ ‘)(0-9)*)*",
		
	},
	"VOLUME_UBI": {
        "prefix": "AT THE LOCATION params",
        "body": [
            "AT THE LOCATION ${1:params}"
        ],
		"description": "Creates a mount point with the specified name and marks it as holding externally mounted volumes from native host or other containers.",
		
	},
	"USER": {
        "prefix": "FOR THE USER users",
        "body": [
            "FOR THE USER ${1:users}"
        ],
		"description": "Sets the user name (or UID) and optionally the user group (or GID) to use when running the image and for any RUN, CMD and ENTRYPOINT instructions that follow it in the Dockerfile.",
		
	},
	"VOLUME": {
        "prefix": "AT VOLUME params",
        "body": [
            "AT VOLUME ${1:params}"
        ],
		"description": "Creates a mount point with the specified name and marks it as holding externally mounted volumes from native host or other containers.",
		
	},
	"WORKDIR": {
        "prefix": "AT WORK DIRECTORY STRING",
        "body": [
            "AT WORK DIRECTORY ${1:STRING}"
        ],
		"description": "Sets the working directory for any RUN, CMD, ENTRYPOINT, COPY and ADD instructions that follow it in the Dockerfile.",
		
	},
  
}